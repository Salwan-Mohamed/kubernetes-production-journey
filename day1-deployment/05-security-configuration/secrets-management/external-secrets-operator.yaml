---
# External Secrets Operator - SecretStore Configuration
# Connects to Vault for secret synchronization
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: production
spec:
  provider:
    vault:
      server: "https://vault.vault.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      
      # Authentication using Kubernetes service account
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "production-app"
          serviceAccountRef:
            name: backend
      
      # TLS configuration
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # Your CA certificate here
        -----END CERTIFICATE-----

---
# ClusterSecretStore (accessible from all namespaces)
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: vault-backend-cluster
spec:
  provider:
    vault:
      server: "https://vault.vault.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "cluster-admin"
          serviceAccountRef:
            name: external-secrets
            namespace: external-secrets-system
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # Your CA certificate here
        -----END CERTIFICATE-----

---
# ExternalSecret - Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: production
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  
  target:
    name: db-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        # Template with multiple keys
        DB_HOST: "{{ .host }}"
        DB_PORT: "{{ .port }}"
        DB_NAME: "{{ .database }}"
        DB_USER: "{{ .username }}"
        DB_PASSWORD: "{{ .password }}"
        # Connection string
        DATABASE_URL: "postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}?sslmode=require"
  
  data:
  - secretKey: host
    remoteRef:
      key: production/database
      property: host
  
  - secretKey: port
    remoteRef:
      key: production/database
      property: port
  
  - secretKey: database
    remoteRef:
      key: production/database
      property: database
  
  - secretKey: username
    remoteRef:
      key: production/database
      property: username
  
  - secretKey: password
    remoteRef:
      key: production/database
      property: password

---
# ExternalSecret - API Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: api-credentials
  namespace: production
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  
  target:
    name: app-credentials
    creationPolicy: Owner
  
  data:
  - secretKey: stripe-api-key
    remoteRef:
      key: production/stripe
      property: api_key
  
  - secretKey: sendgrid-api-key
    remoteRef:
      key: production/sendgrid
      property: api_key
  
  - secretKey: jwt-secret
    remoteRef:
      key: production/jwt
      property: secret

---
# ExternalSecret - TLS Certificates
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: tls-certificates
  namespace: production
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  
  target:
    name: app-tls
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ .cert }}"
        tls.key: "{{ .key }}"
        ca.crt: "{{ .ca }}"
  
  data:
  - secretKey: cert
    remoteRef:
      key: production/tls
      property: certificate
  
  - secretKey: key
    remoteRef:
      key: production/tls
      property: private_key
  
  - secretKey: ca
    remoteRef:
      key: production/tls
      property: ca_certificate
